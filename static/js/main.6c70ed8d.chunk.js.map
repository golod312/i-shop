{"version":3,"sources":["reducers/phonesReducer.js","ActionTypes.js","reducers/phonesPageReducer.js","reducers/phonePageReducer.js","reducers/basketReducer.js","reducers/categoriesReducer.js","reducers/index.js","actions/api/mockPhones.js","actions/api/mockCategories.js","actions/api/index.js","selectors.js","actions/index.js","components/basketCard/BasketCard.js","components/categories/Categories.js","components/search/Search.js","components/sideBar/Sidebar.js","containers/leyout/Layout.js","containers/phones/Phones.js","containers/phone/Phone.js","containers/basket/Basket.js","routes.js","index.js"],"names":["initialState","phonesReducer","state","arguments","length","undefined","_ref","type","payload","newValue","R","moreValue","id","ids","search","phonesPageReducer","phonePageReducer","basketReducer","Object","objectSpread2","concat","toConsumableArray","filter","el","categoriesReducer","createRootReducer","history","combineReducers","router","connectRouter","mockPhones","categoryId","name","description","price","image","cpu","camera","size","weight","display","battery","memory","mockCategories","fetchPhones","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","abrupt","Promise","resolve","reject","phones","stop","apply","this","loadMorePhones","_ref3","_callee2","_ref2","offset","_context2","console","log","_x","fetchPhonesById","_ref4","_callee3","phone","_context3","_x2","fetchCategories","_ref5","_callee4","_context4","rejevt","categories","getPhonesById","getPhones","ownProps","map","phonesId","categoriesId","match","params","RegExp","test","getTotalPrice","getTotalBasketCount","getCategories","values","getBasketPhonesWithCount","uniqIds","Set","count","addPhoneToBasket","dispatch","connect","totalPrice","totalBasketCount","react_default","createElement","className","react_router_dom","to","aria-hidden","exact","style","background","isActive","item","category","key","searchPhone","text","_useState","useState","_useState2","slicedToArray","setState","onSubmit","e","preventDefault","onChange","target","value","Sidebar","basketCard_BasketCard","search_Search","categories_Categories","Layout","children","sideBar_Sidebar","Phones","props","index","shortDiscription","substring","src","alt","onClick","_this","_this$props","leyout_Layout","renderPhone","Component","fetchPhonesApi","sent","t0","error","getState","loadMorePhonesApi","_x3","_x4","fetchCategoriesApi","Phone","renderFilds","renderContent","renderSideBar","fetchPhonesByIdApi","_x5","Basket","removePhoneFromBasket","_this$props2","cleanBasket","basketCheckout","_this$props3","renderSidebar","alert","JSON","stringify","routes","react_router","path","component","createBrowserHistory","middlewares","thunk","routerMiddleware","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","react_redux_es","document","getElementById"],"mappings":"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","file":"static/js/main.6c70ed8d.chunk.js","sourcesContent":["import { FETCH_PHONES_SUCCESS, LOAD_MORE_PHONES_SUCCESS, FETCH_PHONE_BY_ID_SUCCESS } from \"../ActionTypes\"\nimport * as R from \"ramda\"\n\n\n//тут мы получаем все телефоны которые приходят с сервера \nconst initialState = {}\nexport default (state = initialState, { type, payload }) => {\n          switch (type) {\n                    case FETCH_PHONES_SUCCESS: {\n\n                              const newValue = R.indexBy(R.prop('id'), payload)\n                              //ramda выполняет деструкризизацию данных \n                              return R.merge(state, newValue)\n                              // const categories = payload.reduce((acc, item) => {\n                              //           acc[item.id] = item\n                              //           return acc\n                              // }, {})\n                              // return {\n                              //           ...state, ...categories\n                              // }\n                    }\n                    case LOAD_MORE_PHONES_SUCCESS: {\n\n                              const moreValue = R.indexBy(R.prop('id'), payload)\n                              return R.merge(state, moreValue)\n                              // return {\n                              //           ...state, ...moreValue\n\n                              // }\n\n\n\n                    }\n                    case FETCH_PHONE_BY_ID_SUCCESS: {\n                              // return {\n                              //           ...state,\n                              //           phone: payload\n                              // }\n                              return R.assoc(payload.id, payload, state)\n                    }\n\n\n\n                    default:\n                              return state\n          }\n\n}","export const FETCH_PHONES_START = \"FETCH_PHONES_START\"\nexport const FETCH_PHONES_SUCCESS = \"FETCH_PHONES_SUCCESS\"\nexport const FETCH_PHONES_ERROR = \"FETCH_PHONES_ERROR\"\n\nexport const LOAD_MORE_PHONES_START = \"LOAD_MORE_PHONES_START\"\nexport const LOAD_MORE_PHONES_SUCCESS = \"LOAD_MORE_PHONES_SUCCESS\"\nexport const LOAD_MORE_PHONES_ERROR = \"LOAD_MORE_PHONES_ERROR\"\n\nexport const FETCH_PHONE_BY_ID_START = \"FETCH_PHONE_BY_ID_START\"\nexport const FETCH_PHONE_BY_ID_SUCCESS = \"FETCH_PHONE_BY_ID_SUCCESS\"\nexport const FETCH_PHONE_BY_ID_ERROR = \"FETCH_PHONE_BY_ID_ERROR\"\n\nexport const ADD_PHONE_TO_BASKET = \"ADD_PHONE_TO_BASKET\"\n\nexport const SEARCH_PHONE = \"SEARCH_PHONE\"\n\nexport const FETCH_CATEGORIES_START = \"FETCH_PHONE_BY_CATEGORIES\"\nexport const FETCH_CATEGORIES_SUCCESS = \"FETCH_CATEGORIES_SUCCESS\"\nexport const FETCH_CATEGORIES_ERROR = \"FETCH_PHONE_BY_CATEGORIES_ERROR\"\n\nexport const REMOVE_PHONE_FROM_BASKET = \"REMOVE_PHONE_FROM_BASKET \"\n\nexport const CLEAN_BASKET = \"CLEAN_BASKET\"","//получаем телефоны только с страницы phones\n//тут будем храинть id телефонов которые мы зафетчили\nimport { FETCH_PHONES_SUCCESS, LOAD_MORE_PHONES_SUCCESS, SEARCH_PHONE } from \"../ActionTypes\"\nimport * as R from \"ramda\"\n\nconst initialState = {\n          ids: [],\n          search: \"\"\n}\n\nexport default (state = initialState, { type, payload }) => {\n\n          switch (type) {\n                    case FETCH_PHONES_SUCCESS:\n\n                              return R.merge(state, {\n                                        ids: R.pluck(\"id\", payload)\n                              })\n                    // const ids = payload.map(id => id.id)\n                    // return {\n                    //           ...state,\n                    //           ids: ids\n                    // }\n\n\n                    //метод библиотеки ramda который дoстает из нашего массива данных, который \n                    //мы зафетчили только ключи id\n                    case LOAD_MORE_PHONES_SUCCESS:\n                              const ids = R.pluck(\"id\", payload)\n                              return R.merge(state, {\n                                        ids: R.concat(state.ids, ids)\n                              })\n                    // return {\n                    //           ...state,\n                    //           ids: [...state.ids, ...ids]\n                    // }\n                    case SEARCH_PHONE:\n                              return R.merge(state, {\n                                        search: payload\n                              })\n                    // return {\n                    //           ...state,\n                    //           search: payload\n                    // }\n\n                    default:\n                              return state;\n          }\n}","//храним все данные которые касаются страницы с телефоном\nimport { FETCH_PHONE_BY_ID_SUCCESS } from \"../ActionTypes\"\nimport * as R from \"ramda\"\n\n\nconst initialState = {\n          id: null\n}\n\nexport default (state = initialState, { type, payload }) => {\n\n          switch (type) {\n                    case FETCH_PHONE_BY_ID_SUCCESS: {\n                              return R.merge(state, {\n                                        id: payload.id\n                              })\n                              //           return {\n                              //                     ...state,\n                              //                     id: payload.id\n                              //           }\n                    }\n\n\n\n                    default:\n                              return state\n          }\n\n}","import { ADD_PHONE_TO_BASKET, REMOVE_PHONE_FROM_BASKET, CLEAN_BASKET } from \"../ActionTypes\";\n\nconst initialState = {\n          ids: []\n}\n\n\n\n\nexport default (state = initialState, { type, payload }) => {\n\n          switch (type) {\n                    case ADD_PHONE_TO_BASKET:\n\n                              return {\n                                        ...state,\n                                        ids: [...state.ids, ...payload]\n\n                              }\n\n                    case REMOVE_PHONE_FROM_BASKET:\n                              return {\n                                        ...state,\n                                        ids: state.ids.filter(el => el !== payload)\n                              }\n\n                    case CLEAN_BASKET:\n                              return initialState\n\n\n                    default: return state\n\n          }\n}","import { FETCH_CATEGORIES_SUCCESS } from \"../ActionTypes\";\nimport * as R from \"ramda\"\nconst initialState = {}\n\n\nexport default (state = initialState, { type, payload }) => {\n          switch (type) {\n                    case FETCH_CATEGORIES_SUCCESS:\n                              // const categories = payload.reduce((acc, item) => {\n                              //           acc[item.id] = item\n                              //           return acc\n                              // }, {})\n                              // return {\n                              //           ...state, ...categories\n                              // }\n                              const newValue = R.indexBy(R.prop('id'), payload)\n                              //ramda выполняет деструкризизацию данных \n                              return R.merge(state, newValue)\n\n                    default: return state\n\n          }\n}","import { combineReducers } from \"redux\";\nimport phonesReducer from \"./phonesReducer\";\nimport phonesPageReducer from \"./phonesPageReducer\";\nimport phonePageReducer from \"./phonePageReducer\";\nimport basketReducer from \"./basketReducer\";\nimport categoriesReducer from \"./categoriesReducer\";\nimport { connectRouter } from \"connected-react-router\";\n\nconst createRootReducer = (history) => combineReducers({\n          phonesReducer,\n          phonesPageReducer,\n          phonePageReducer,\n          basketReducer,\n          categoriesReducer,\n          router: connectRouter(history)\n})\n\nexport default createRootReducer","export default [\n          {\n                    id: '1',\n                    categoryId: '1',\n                    name: 'Apple iPhone 5c',\n                    description:\n                              'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam ultricies lorem odio, at laoreet tellus sodales in. Nullam maximus eros ut tortor ultricies rutrum. Aliquam euismod lacus non est egesta',\n                    price: 823,\n                    image: 'uploads/iphone5c-selection-hero-2013.png',\n                    cpu: '1.3GHz Apple A6',\n                    camera: '8mp (3264x2448)',\n                    size: '124.4mm x 59.2mm x 8.97mm (4.9 x 2.33 x 0.35)',\n                    weight: '132 grams (4.7 ounces) with battery',\n                    display: '4.0 326 pixel density',\n                    battery: '1480 mAh',\n                    memory: '16GB, 32GB and RAM 1 GB'\n          },\n          {\n                    id: '2',\n                    categoryId: '1',\n                    name: 'Apple iPhone 6',\n                    description:\n                              'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam ultricies lorem odio, at laoreet tellus sodales in. Nullam maximus eros ut tortor ultricies rutrum. Aliquam euismod lacus non est egesta',\n                    price: 953,\n                    image: 'uploads/51u6y9Rm8QL._SY300_.jpg',\n                    cpu: '1.3GHz Apple A6',\n                    camera: '8mp (3264x2448)',\n                    size: '124.4mm x 59.2mm x 8.97mm (4.9 x 2.33 x 0.35)',\n                    weight: '132 grams (4.7 ounces) with battery',\n                    display: '4.0 326 pixel density',\n                    battery: '1480 mAh',\n                    memory: '16GB, 32GB and RAM 1 GB'\n          },\n          {\n                    id: '3',\n                    categoryId: '4',\n                    name: 'Lenovo A6000',\n                    description:\n                              'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam ultricies lorem odio, at laoreet tellus sodales in. Nullam maximus eros ut tortor ultricies rutrum. Aliquam euismod lacus non est egesta',\n                    price: 764,\n                    image: 'uploads/_35%20(1).JPG',\n                    cpu: '1.3GHz Apple A6',\n                    camera: '8mp (3264x2448)',\n                    size: '124.4mm x 59.2mm x 8.97mm (4.9 x 2.33 x 0.35)',\n                    weight: '132 grams (4.7 ounces) with battery',\n                    display: '4.0 326 pixel density',\n                    battery: '1480 mAh',\n                    memory: '16GB, 32GB and RAM 1 GB'\n          },\n          {\n                    id: '4',\n                    categoryId: '5',\n                    name: 'Nokia Lumia 1520',\n                    description:\n                              'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam ultricies lorem odio, at laoreet tellus sodales in. Nullam maximus eros ut tortor ultricies rutrum. Aliquam euismod lacus non est egesta',\n                    price: 674,\n                    image: 'uploads/Nokia_3.jpeg',\n                    cpu: '1.3GHz Apple A6',\n                    camera: '8mp (3264x2448)',\n                    size: '124.4mm x 59.2mm x 8.97mm (4.9 x 2.33 x 0.35)',\n                    weight: '132 grams (4.7 ounces) with battery',\n                    display: '4.0 326 pixel density',\n                    battery: '1480 mAh',\n                    memory: '16GB, 32GB and RAM 1 GB'\n          },\n          {\n                    id: '5',\n                    categoryId: '3',\n                    name: 'HTC One',\n                    description:\n                              'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam ultricies lorem odio, at laoreet tellus sodales in. Nullam maximus eros ut tortor ultricies rutrum. Aliquam euismod lacus non est egesta',\n                    price: 674,\n                    image: 'uploads/htc-one-m7-802w-dual-sim-silver.jpg',\n                    cpu: '1.3GHz Apple A6',\n                    camera: '8mp (3264x2448)',\n                    size: '124.4mm x 59.2mm x 8.97mm (4.9 x 2.33 x 0.35)',\n                    weight: '132 grams (4.7 ounces) with battery',\n                    display: '4.0 326 pixel density',\n                    battery: '1480 mAh',\n                    memory: '16GB, 32GB and RAM 1 GB'\n          },\n          {\n                    id: '6',\n                    categoryId: '2',\n                    name: 'Samsung Galaxy S6',\n                    description:\n                              'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam ultricies lorem odio, at laoreet tellus sodales in. Nullam maximus eros ut tortor ultricies rutrum. Aliquam euismod lacus non est egesta',\n                    price: 674,\n                    image: 'uploads/Agnes_Case_for_Samsung_Galaxy_S6_(1)__92643_thumb.jpg',\n                    cpu: '1.3GHz Apple A6',\n                    camera: '8mp (3264x2448)',\n                    size: '124.4mm x 59.2mm x 8.97mm (4.9 x 2.33 x 0.35)',\n                    weight: '132 grams (4.7 ounces) with battery',\n                    display: '4.0 326 pixel density',\n                    battery: '1480 mAh',\n                    memory: '16GB, 32GB and RAM 1 GB'\n          }\n]\n","export default [\n  {\n    id: \"1\",\n    name: 'Apple'\n  },\n  {\n    id: \"2\",\n    name: 'Samsung'\n  },\n  {\n    id: \"3\",\n    name: 'Htc'\n  },\n  {\n    id: \"4\",\n    name: 'Lenovo'\n  },\n  {\n    id: \"5\",\n    name: 'Microsoft'\n  }\n]\n","\nimport phones from \"./mockPhones\"\nimport categories from \"./mockCategories\"\n\n// import axios from \"axios\"\nimport * as R from \"ramda\"\n\nexport const fetchPhones = async () => {\n          return new Promise((resolve, reject) => {\n                    resolve(phones)\n\n          })\n          // const responce = await axios.get(\"\")\n          // return responce\n\n}\n\nexport const loadMorePhones = async ({ offset }) => {\n          console.log(offset);\n          return new Promise((resolve, reject) => {\n                    resolve(phones)\n          })\n\n          // const responce = await axios.get(\"\")\n          // return responce\n}\n\n\nexport const fetchPhonesById = async (id) => {\n          const phone = R.find(R.propEq(\"id\", id), phones)\n          // const phone = phones[id - 1]\n\n          return new Promise((resolve, reject) => {\n                    resolve(phone)\n          })\n\n          // const responce = await axios.get(\"\")\n          // return responce\n}\n\nexport const fetchCategories = async () => {\n          return new Promise((resolve, rejevt) => {\n                    resolve(categories)\n          })\n\n          // const responce = await axios.get(\"\")\n          // return responce\n}","import * as R from \"ramda\"\n\n\n// export const getPhonesById = (state, id) => state.phonesReducer[id]\n//функция получает поле объекта state по id\nexport const getPhonesById = (state, id) => R.prop(id, state.phonesReducer)\n\n\nexport const getPhones = (state, ownProps) => {\n          const phones = state.phonesPageReducer.ids.map(phonesId => getPhonesById(state, phonesId))\n          const search = state.phonesPageReducer.search\n          const categoriesId = ownProps.match.params.id\n          let phonesFilter = []\n\n          // const phonesFilter = phones.filter(el => (el.name.toLowerCase().includes(search)))\n          // const phonesFilter = categoriesId ? phones.filter(el => el.categoryId === categoriesId).filter(el => new RegExp(search, \"i\").test(el.name)) : phones.filter(el => new RegExp(search, \"i\").test(el.name))\n          if (categoriesId) {\n                    phonesFilter = phones.filter(el => el.categoryId === categoriesId).filter(el => new RegExp(search, \"i\").test(el.name))\n          }\n          else {\n                    phonesFilter = phones.filter(el => new RegExp(search, \"i\").test(el.name))\n          }\n          return phonesFilter\n}\n\n\n//мы хотим пройтись map по нашим id и на стрнаице вывести список телефонов из \n//  редьюсера  phonesReducer исходя из id\n\n//эти функции не мутируют данные \n\n\nexport const getRenderedPhonseLength = (state) => R.length(state.phonesPageReducer.ids)\n// export const getRenderedPhonseLength = (state) => state.phonesPageReducer.ids.length\n\nexport const getTotalPrice = state => {\n\n          // return state.basketReducer.ids.map(id => (getPhonesById(state, id)))\n          //           .reduce((total, amount) => (total + amount.price), 0)\n\n          const totalPrice = R.compose(\n                    R.sum,\n                    R.pluck(\"price\"),\n                    R.map(id => getPhonesById(state, id))\n          )(state.basketReducer.ids)\n\n          return totalPrice\n\n\n\n\n}\nexport const getTotalBasketCount = state => state.basketReducer.ids.length\n\nexport const getCategories = state => Object.values(state.categoriesReducer)\n\n// export const getActiveCategoryId = ownProps => ownProps.match.params.id\n\nexport const getBasketPhonesWithCount = state => {\n          //к нам пришел массив id телефонов которые хочет купить клиент\n          //Задача выдать массив объектов без повтора по id, в каждый объект элемента массива добавить поле count\n          //в которое записать количество раз повторяющихся id в первоначальном массиве \n\n          const phone = state.basketReducer.ids.map(el => getPhonesById(state, el))\n          //получаем массив телефонов отфильтрованых по  id\n          const uniqIds = [...new Set(phone)]\n          // удаляем дубликаты \n          const phoneCount = id => state.basketReducer.ids.filter(el => el === id).length\n          // функция которая возвращает сколько раз id был в массиве, то есть количество купленных\n          // товаров одного типа \n          const phoneWithCount = uniqIds.map(el => ({ ...el, ...{ count: phoneCount(el.id) } }))\n          // добавляем в наш массив без дубликатов, в каждый объект новое поле count с количеством\n          // товаров одного типа \n          return phoneWithCount\n}\n\n\n\n\n","import {\n          FETCH_PHONES_START,\n          FETCH_PHONES_SUCCESS,\n          FETCH_PHONES_ERROR,\n          LOAD_MORE_PHONES_START,\n          LOAD_MORE_PHONES_SUCCESS,\n          LOAD_MORE_PHONES_ERROR,\n          FETCH_PHONE_BY_ID_ERROR,\n          FETCH_PHONE_BY_ID_SUCCESS,\n          FETCH_PHONE_BY_ID_START,\n          ADD_PHONE_TO_BASKET,\n          SEARCH_PHONE,\n          FETCH_CATEGORIES_SUCCESS,\n          FETCH_CATEGORIES_START,\n          FETCH_CATEGORIES_ERROR,\n          REMOVE_PHONE_FROM_BASKET,\n          CLEAN_BASKET\n} from \"../ActionTypes\"\n\nimport {\n          fetchPhones as fetchPhonesApi,\n          loadMorePhones as loadMorePhonesApi,\n          fetchPhonesById as fetchPhonesByIdApi,\n          fetchCategories as fetchCategoriesApi\n} from \"./api/index\"\nimport { getRenderedPhonseLength } from \"../selectors\"\n\n\n\nexport const fetchPhones = () => async dispatch => {\n          //redux thunk middleware описывает actions в виде функций\n          dispatch({\n                    type: FETCH_PHONES_START\n          })\n          try {\n                    const phones = await fetchPhonesApi()\n\n                    dispatch({\n                              type: FETCH_PHONES_SUCCESS,\n                              payload: phones\n                    })\n          }\n          catch (error) {\n                    dispatch({\n                              type: FETCH_PHONES_ERROR,\n                              payload: error,\n                              error: true\n                    })\n          }\n\n}\n\nexport const fetchCategories = () => async dispatch => {\n          dispatch({\n                    type: FETCH_CATEGORIES_START\n          })\n          try {\n                    const categories = await fetchCategoriesApi()\n                    dispatch({\n                              type: FETCH_CATEGORIES_SUCCESS,\n                              payload: categories\n                    })\n          }\n          catch (error) {\n                    dispatch({\n                              type: FETCH_CATEGORIES_ERROR,\n                              payload: error,\n                              error: true\n                    })\n          }\n}\n\nexport const loadMorePhones = () => async (dispatch, getState) => {\n\n          const offset = getRenderedPhonseLength(getState())\n          //количество данных которые нужно загружать каждый раз, передается в API\n          dispatch({\n                    type: LOAD_MORE_PHONES_START\n          })\n          try {\n                    const phones = await loadMorePhonesApi({ offset })\n                    dispatch({\n                              type: LOAD_MORE_PHONES_SUCCESS,\n                              payload: phones\n                    })\n          }\n          catch (error) {\n                    dispatch({\n                              type: LOAD_MORE_PHONES_ERROR,\n                              payload: error,\n                              error: true\n                    })\n          }\n\n}\n\nexport const fetchPhonesById = id => async dispatch => {\n          dispatch({\n                    type: FETCH_PHONE_BY_ID_START\n          })\n\n          try {\n                    const phone = await fetchPhonesByIdApi(id)\n\n                    dispatch({\n                              type: FETCH_PHONE_BY_ID_SUCCESS,\n                              payload: phone\n                    })\n          }\n          catch (error) {\n                    dispatch({\n                              type: FETCH_PHONE_BY_ID_ERROR,\n                              payload: error,\n                              error: true\n                    })\n          }\n\n}\n\nexport const addPhoneToBasket = id => dispatch => {\n\n          dispatch({\n                    type: ADD_PHONE_TO_BASKET,\n                    payload: id\n          })\n}\n\nexport const searchPhone = text => dispatch => {\n          dispatch({\n                    type: SEARCH_PHONE,\n                    payload: text\n          })\n}\n\nexport const removePhoneFromBasket = id => dispatch => {\n          dispatch({\n                    type: REMOVE_PHONE_FROM_BASKET,\n                    payload: id\n          })\n}\n\nexport const cleanBasket = () => dispatch => {\n          dispatch({\n                    type: CLEAN_BASKET\n          })\n}\n\nexport const basketCheckout = phones => {\n          alert(JSON.stringify(phones))\n}\n\n\n\n\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\"\nimport { getTotalPrice, getTotalBasketCount } from \"../../selectors\"\n\nconst BasketCard = ({ totalPrice, totalBasketCount }) => {\n\n          return (\n                    <div className=\"cart\">\n                              <div className=\"dropdown\">\n                                        <Link to=\"/basket\"\n                                                  id=\"dLable\"\n                                                  className=\"btn btn-inverse btn-block btn-lg\">\n                                                  <i className=\"fa fa-shopping-cart\" aria-hidden=\"true\"></i>\n                                                  <span> {totalBasketCount} item(s) - $ {totalPrice}</span>\n                                        </Link>\n                              </div>\n                    </div>\n          )\n}\n\nconst mapState = state => {\n          return {\n                    totalPrice: getTotalPrice(state),\n                    totalBasketCount: getTotalBasketCount(state)\n          }\n}\n\nexport default connect(mapState, null)(BasketCard)","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { NavLink } from \"react-router-dom\";\nimport { getCategories, } from \"../../selectors\"\n// import { withRouter } from \"react-router\";\n// import { compose } from \"redux\";\n\nconst Categories = ({ categories, }) => {\n\n          const renderCategory = category => {\n                    return (\n                              <NavLink to={`/categories/${category.id}`}\n                                        className=\"list-group-item\"\n                                        style={({ isActive }) => ({ background: isActive ? \"active\" : \"\" })}\n                                        key={category.id}\n                              > {category.name}</NavLink >\n                    )\n          }\n          return <div className=\"well\">\n                    <h4>Brand</h4>\n                    <div className=\"list-group\">\n                              <NavLink to=\"/\"\n                                        exact\n                                        className=\"list-group-item\"\n                                        style={({ isActive }) => ({ background: isActive ? \"\" : \"active\" })}\n                              >All</NavLink>\n                              {categories.map(item => renderCategory(item))}\n                    </div>\n          </div>\n}\n\n\nconst mapState = (state) => {\n          return {\n                    categories: getCategories(state),\n                    // activeCategoryId: getActiveCategoryId(ownProps)\n\n\n          }\n}\n\n// export default compose(\n//           withRouter,\n//           connect(mapState, null)\n// )(Categories)\n\nexport default connect(mapState, null)(Categories)\n\n//обернули компонент Categories в withRouter \n//для того что бы получить  доступ к ownProps из Routa,теперь мы можем получить категорию из path и через \n//onwProps передать ее в компоненте Phones в качестве пропсов в метод    phones: getPhones(state,ownProps),","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { searchPhone } from \"../../actions/index\"\n\nconst Search = ({ searchPhone }) => {\n          //ПЕРЕПИСАТЬ ПОД АССИНХРОННУЮ ОПЕРАЦИЮ, ПОИСК ПРОДУКТА ПО ЗАПРОСУ НА СЕРВЕР\n          const [state, setState] = useState()\n\n          const handleSubmit = (e) => {\n                    e.preventDefault()\n                    searchPhone(state)\n          }\n\n          const handleChange = (e) => setState(e.target.value)\n\n\n          return <div className=\"well blosd\">\n                    <div className=\"lead\">Quick shop</div>\n                    <div className=\"input-group\">\n                              <form onSubmit={handleSubmit}>\n                                        <input onChange={handleChange}\n                                                  type=\"text\"\n                                                  className=\"form-control\"\n                                        ></input>\n                              </form>\n                              <span className=\"input-group-btn\">\n                                        <button className=\"btn btn-default\" >\n                                                  <span className=\"glyphicon glyphicon-search\"></span>\n\n\n                                        </button>\n                              </span>\n                    </div>\n          </div>\n}\n\n\nexport default connect(null, { searchPhone })(Search)\n","import React from \"react\";\nimport BasketCard from \"../basketCard/BasketCard\";\nimport Categories from \"../categories/Categories\";\nimport Search from \"../search/Search\";\n\nconst Sidebar = () => {\n          return <div >\n                    <BasketCard />\n                    <Search />\n                    <Categories />\n          </div>\n}\n\nexport default Sidebar","import React from \"react\";\nimport Sidebar from \"../../components/sideBar/Sidebar\";\n\n\n\n\n\n\n\n\n//exact проверяет полный  URL это для тех route которые могут совпадать\n// это касается например \"/\" который будет во всех путях\nconst Layout = ({ children }) => {\n          //layout это стейтлес компонент во внутрь которого мы можем передать какие то \n          // компоненты и эти компоненты будут рендерится на месте children\n          // то есть это просто обертка  \n          return <div className=\"view-container\">\n                    <div className=\"container\">\n                              <div className=\"row\">\n                                        <div className=\"col-md-3\">\n                                                  <Sidebar />\n                                        </div>\n                                        <div className=\"col-md-9\">\n                                                  {children}\n                                        </div>\n                              </div>\n                    </div>\n\n          </div>\n}\n\nexport default Layout","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { fetchPhones, loadMorePhones, addPhoneToBasket, fetchCategories } from \"../../actions/index\"\nimport { getPhones } from \"../../selectors\"\nimport Layout from \"../leyout/Layout\"\n\n\nclass Phones extends Component {\n\n          componentDidMount() {\n                    this.props.fetchPhones()\n                    this.props.fetchCategories()\n          }\n\n          renderPhone(phone, index) {\n                    const shortDiscription = phone.description.substring(0, 60)\n                    const { addPhoneToBasket } = this.props\n                    return (<div className=\"col-sm-4 col-lg-4 col-md-4 book-list\" key={index}>\n                              <div className=\"thumbnail\">\n                                        <img\n                                                  src={phone.image}\n                                                  alt={phone.name}\n                                                  className=\"img-thumbnail\" />\n                                        <div className=\"caption\">\n                                                  <h4 className=\"pull-right\">\n                                                            ${phone.price}\n                                                  </h4>\n                                                  <h4>\n                                                            <Link to={`phones/${phone.id}`}>\n                                                                      {phone.name}\n                                                            </Link>\n                                                  </h4>\n                                                  <p>{shortDiscription}</p>\n                                                  <p className=\"itemButton\">\n                                                            <button className=\"btn btn-primary\"\n                                                                      onClick={() => addPhoneToBasket(phone.id)}\n                                                            >\n                                                                      Buy now!\n                                                            </button>\n                                                            <Link to={`phones/${phone.id}`} className=\"btn btn-default\">\n                                                                      More info\n                                                            </Link>\n                                                  </p>\n                                        </div>\n                              </div>\n                    </div>)\n          }\n\n          render() {\n                    const { phones, loadMorePhones } = this.props\n\n\n                    return (\n                              <Layout>\n                                        <div>\n                                                  <div className=\"books row\">\n                                                            {phones.map((phone, index) => this.renderPhone(phone, index))}\n                                                  </div>\n                                                  <div className=\"row \">\n                                                            <div className=\"col-md-12\">\n                                                                      <button className=\"pull-right btn btn-primary\"\n                                                                                onClick={loadMorePhones}>\n                                                                                Load More\n                                                                      </button>\n                                                            </div>\n                                                  </div>\n                                        </div>\n                              </Layout>\n                    )\n          }\n\n\n}\n\nconst mapState = (state, ownProps) => {\n          return {\n                    phones: getPhones(state, ownProps),\n\n                    //функция которая занимается фильтрацией и тарансформацией данных\n          }\n}\n\n\n\nexport default connect(mapState, { fetchPhones, loadMorePhones, addPhoneToBasket, fetchCategories })(Phones)\n\n\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\"\n\nimport { fetchPhonesById, addPhoneToBasket } from \"../../actions/index\"\nimport { getPhonesById } from \"../../selectors\";\nimport BasketCard from \"../../components/basketCard/BasketCard\";\nimport * as R from \"ramda\"\n\nclass Phone extends Component {\n          componentDidMount() {\n                    const id = this.props.match.params.id;\n                    //берем из history\n                    this.props.fetchPhonesById(id)\n          }\n\n          renderFilds() {\n                    const { phone } = this.props\n                    // const columnField = [...Object.entries(phone)].slice(6)\n                    //преобразовываем  объект в двумерный массив и отрезаем только те \n                    //значения которые нужно вывести\n                    const columnField = R.compose(R.toPairs,\n                              R.pick([\n                                        \"cpu\",\n                                        \"camera\",\n                                        \"size\",\n                                        \"weight\",\n                                        \"display\",\n                                        \"battery\",\n                                        \"memory\"\n                              ]))(phone)\n\n\n                    return columnField.map(([key, value]) => (\n                              <div className=\"column\" key={key}>\n                                        <div className=\"ab-details-title\">\n                                                  {key}\n                                        </div>\n                                        <div className=\"ab-details-info\">\n                                                  {value}\n                                        </div>\n                              </div>\n                    ))\n\n\n          }\n          renderContent() {\n                    const { phone } = this.props\n\n                    return (\n                              <div className=\"thumbnail\">\n                                        <div className=\"row\">\n                                                  <div className=\"col-md-6\">\n                                                            <img className=\"img-thumbnail\"\n                                                                      src={phone.image}\n                                                                      alt={phone.name} />\n                                                  </div>\n                                                  <div className=\"col-md-6\">\n                                                            {this.renderFilds()}\n                                                  </div>\n\n                                        </div>\n                                        <div className=\"caption-full\">\n                                                  <h4 className=\"pull-right\">{phone.price}$</h4>\n                                                  <h4>{phone.name}</h4>\n                                                  <p>{phone.description}</p>\n                                        </div>\n\n                              </div>\n                    )\n          }\n\n          renderSideBar() {\n                    const { phone, addPhoneToBasket } = this.props\n                    return (\n                              <div>\n                                        <p className=\"lead\"> Quick shop</p>\n                                        <BasketCard />\n                                        <div className=\"form-group\">\n                                                  <h1>{phone.name}</h1>\n                                                  <h2>${phone.price}</h2>\n                                        </div>\n                                        <Link to=\"/\" className=\"btn btn-info btn-block\">Back to store</Link>\n                                        <button type=\"botton\" className=\"btn btn-success btn-block\"\n                                                  onClick={() => addPhoneToBasket(phone.id)}>Buy now!</button>\n                              </div>\n                    )\n          }\n\n          render() {\n                    const { phone } = this.props\n                    return (\n                              <div className=\"view-container\">\n                                        <div className=\"container\">\n                                                  <div className=\"row\">\n                                                            <div className=\"col-md-9\">\n                                                                      {phone && this.renderContent()}\n                                                                      {/* пока нет данных, разментка не будет рендерится */}\n                                                            </div>\n                                                            <div className=\"col-md-3\">\n                                                                      {phone && this.renderSideBar()}\n                                                            </div>\n                                                  </div>\n                                        </div>\n                              </div>\n                    )\n          }\n}\n\nconst mapState = state => {\n          return {\n                    phone: getPhonesById(state, state.phonePageReducer.id)\n          }\n}\n\nexport default connect(mapState, { fetchPhonesById, getPhonesById, addPhoneToBasket })(Phone)","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getTotalPrice, getBasketPhonesWithCount } from \"../../selectors\"\nimport { removePhoneFromBasket, cleanBasket, basketCheckout } from \"../../actions/index\"\nimport { Link } from \"react-router-dom\";\n\nclass Basket extends Component {\n\n          renderContent() {\n                    const { phones, totalPrice, removePhoneFromBasket } = this.props\n                    return <div>\n                              {phones.length === 0 && <div><img\n                                        src=\"https://as1.ftcdn.net/v2/jpg/02/62/20/02/1000_F_262200245_V1nLvTSo95dYCjlRzbr2nq4g01SMydDK.jpg\"\n                                        alt=\"shopping cart is ampty\"\n                                        className=\"img-thumbnail\"\n                              ></img></div>}\n                              <div className=\"table-responsive\">\n                                        <table className=\"table-bordered table-striped table-condensed cf\">\n                                                  <tbody>\n                                                            {phones.map(phone => (<tr\n                                                                      key={phone.id}\n                                                                      className=\"item-checout\">\n                                                                      <td className=\"first-column-checkout\">\n                                                                                <img className=\"img-thumbnail\"\n                                                                                          src={phone.image}\n                                                                                          alt={phone.name} />\n                                                                      </td>\n                                                                      <td>{phone.name}</td>\n                                                                      <td>${phone.price}</td>\n                                                                      <td>{phone.count}</td>\n                                                                      <td>\n                                                                                <span className=\"delete-cart\" onClick={() => removePhoneFromBasket(phone.id)}></span>\n                                                                      </td>\n                                                            </tr>))}\n                                                  </tbody>\n                                        </table>\n                              </div>\n                              {phones.length !== 0 && <div className=\"row\">\n                                        <div className=\"pull-right total-user-checkout\">\n                                                  <b>Total: </b>\n                                                  ${totalPrice}\n                                        </div>\n                              </div>}\n                    </div>\n          }\n\n\n          renderSidebar() {\n                    const { phones, cleanBasket, basketCheckout } = this.props\n                    return <div>\n                              <Link to=\"/\"\n                                        className=\"btn btn-info\"\n                              >\n                                        <span className=\"glyphicon glyphicon-info-sign\"></span>\n\n                                        <span>  Continue shopping!</span>\n                              </Link>\n                              {phones.length !== 0 &&\n                                        <div>\n                                                  <button\n                                                            onClick={cleanBasket}\n                                                            className=\"btn btn-danger\">\n                                                            <span className=\"glyphicon glyphicon-trash\"></span>\n                                                            <span>  Clean cart</span>\n                                                  </button>\n                                                  <button\n                                                            className=\"btn btn-success\"\n                                                            onClick={() => basketCheckout(phones)}>\n                                                            <span className=\"glyphicon glyphicon-envelope\"></span>\n                                                            <span>  Checkout</span>\n                                                  </button>\n\n\n\n\n                                        </div>}\n                    </div>\n          }\n          render() {\n                    const { phones, totalPrice } = this.props\n                    console.log(phones, totalPrice);\n                    return (\n                              <div className=\"view-container\">\n                                        <div className=\"container\">\n                                                  <div className=\"row\">\n                                                            <div className=\"col-md-9\">\n                                                                      {this.renderContent()}\n                                                            </div>\n                                                            <div className=\"col-md-3 btn-user-checkout\">\n                                                                      {this.renderSidebar()}\n                                                            </div>\n                                                  </div>\n                                        </div>\n                              </div >\n                    )\n          }\n}\n\n\nconst mapState = state => {\n          return {\n                    phones: getBasketPhonesWithCount(state),\n                    totalPrice: getTotalPrice(state)\n          }\n}\n\nexport default connect(mapState, { removePhoneFromBasket, cleanBasket, basketCheckout })(Basket)","\nimport React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\n\nimport Phones from \"./containers/phones/Phones\";\nimport Phone from \"./containers/phone/Phone\";\nimport Basket from \"./containers/basket/Basket\"\n\nexport default (\n\n          <Switch>\n                    <Route path=\"/\" component={Phones} exact />\n                    <Route path=\"/categories/:id\" component={Phones} />\n                    {/* список категорий который будет рендерить компонет Phones\n                    исходя из необходимых id для этого их необходимо зафетчить\n                    в компоненте  Phones */}\n                    <Route path=\"/phones/:id\" component={Phone} />\n                    <Route path=\"/basket\" component={Basket} />\n          </Switch>\n)\n\n\n\n","import './main.css'\nimport 'font-awesome/css/font-awesome.min.css'\n\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { applyMiddleware, createStore } from \"redux\"\nimport { createBrowserHistory } from 'history'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport thunk from 'redux-thunk'\nimport { routerMiddleware } from 'connected-react-router'\n\nimport createRootReducer from './reducers/index'\nimport { Provider } from 'react-redux'\n\nimport routes from './routes'\nimport { HashRouter } from 'react-router-dom'\n\n\nconst history = createBrowserHistory()\nconst middlewares = [thunk, routerMiddleware(history)]\n\nconst store = createStore(\n  createRootReducer(history),\n  composeWithDevTools(applyMiddleware(...middlewares))\n\n  //для использования devTools , composeWithDevTools специальная функция\n  // applyMiddlewar  есть внутри redux используется для того \n  // что бы применить все middleware и это происходит по очереди \n  // по этому используется спред ... это тоже самое что и (a,b,c)\n)\n\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter history={history}>\n      {routes}\n    </HashRouter>\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}